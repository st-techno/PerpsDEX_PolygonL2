// SPDX-License-Identifier: MIT
pragma solidity 0.8.21;

// Import OpenZeppelin libraries for upgradability, access control, and logging
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

// Perpetual DEX with Access Control, Circuit Breaker, Logging, Gas Station, and Proxy Upgradability
contract PerpetualDEX is
    Initializable,
    AccessControlUpgradeable,
    PausableUpgradeable,
    UUPSUpgradeable
{
    // --- Roles ---
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant KEEPER_ROLE = keccak256("KEEPER_ROLE");

    // --- Structs ---
    struct Position {
        uint128 size;
        uint128 collateral;
        int128 entryPrice;
        bool isLong;
        uint32 timestamp;
        uint80 leverage;
    }

    // --- State Variables ---
    address public collateralToken;
    AggregatorV3Interface public priceFeed;

    uint256 public totalLongs;
    uint256 public totalShorts;
    uint256 public fundingRate;
    uint256 public constant FUNDING_INTERVAL = 8 hours;

    mapping(address => Position[]) public positions;
    mapping(address => uint256) public feeReserves;

    // --- Events (Logging) ---
    event PositionOpened(address indexed user, uint256 indexed positionId, uint256 size, bool isLong);
    event PositionClosed(address indexed user, uint256 indexed positionId, uint256 pnl);
    event PositionLiquidated(address indexed user, uint256 indexed positionId, address liquidator);
    event CircuitBreakerActivated(address indexed admin);
    event CircuitBreakerDeactivated(address indexed admin);
    event Upgraded(address indexed newImplementation);

    // --- Initializer ---
    function initialize(address _collateralToken, address _priceFeed) public initializer {
        __AccessControl_init();
        __Pausable_init();
        __UUPSUpgradeable_init();

        collateralToken = _collateralToken;
        priceFeed = AggregatorV3Interface(_priceFeed);

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(ADMIN_ROLE, msg.sender);
    }

    // --- Access Control Modifiers ---
    modifier onlyAdmin() {
        require(hasRole(ADMIN_ROLE, msg.sender), "Not admin");
        _;
    }

    modifier onlyKeeper() {
        require(hasRole(KEEPER_ROLE, msg.sender), "Not keeper");
        _;
    }

    // --- Circuit Breaker (Pausable) ---
    function activateCircuitBreaker() external onlyAdmin {
        _pause();
        emit CircuitBreakerActivated(msg.sender);
    }

    function deactivateCircuitBreaker() external onlyAdmin {
        _unpause();
        emit CircuitBreakerDeactivated(msg.sender);
    }

    // --- Core DEX Functions (with Pausable) ---
    function openPosition(
        uint256 size,
        uint256 collateral,
        bool isLong,
        uint80 leverage
    ) external whenNotPaused {
        require(leverage <= 100, "Exceeds max leverage");
        _transferCollateral(collateral);
        _updateFundingRate();

        (int256 currentPrice,) = _getPrice();
        uint256 fee = _calculateFee(size);

        positions[msg.sender].push(Position({
            size: uint128(size),
            collateral: uint128(collateral),
            entryPrice: int128(currentPrice),
            isLong: isLong,
            timestamp: uint32(block.timestamp),
            leverage: leverage
        }));

        _updateOpenInterest(isLong, size);
        feeReserves[msg.sender] += fee;

        emit PositionOpened(msg.sender, positions[msg.sender].length - 1, size, isLong);
    }

    function closePosition(uint256 positionId) external whenNotPaused {
        Position storage position = positions[msg.sender][positionId];
        require(position.size > 0, "Invalid position");

        _updateFundingRate();
        (int256 currentPrice,) = _getPrice();

        uint256 pnl = _calculatePnl(position, currentPrice);
        uint256 totalAmount = position.collateral + pnl;

        delete positions[msg.sender][positionId];
        _updateOpenInterest(position.isLong, -int256(position.size));

        _transfer(msg.sender, totalAmount);
        emit PositionClosed(msg.sender, positionId, pnl);
    }

    function liquidatePosition(address user, uint256 positionId) external whenNotPaused onlyKeeper {
        Position storage position = positions[user][positionId];
        (int256 currentPrice,) = _getPrice();

        require(_isUnderwater(position, currentPrice), "Position safe");
        feeReserves[msg.sender] += position.collateral / 10; // 10% liquidation fee

        delete positions[user][positionId];
        emit PositionLiquidated(user, positionId, msg.sender);
    }

    // --- Polygon Gas Station Network (Meta-Transactions) ---
    // Accepts relayed transactions via trusted forwarder (Polygon GSN)
    address public trustedForwarder;

    function setTrustedForwarder(address _forwarder) external onlyAdmin {
        trustedForwarder = _forwarder;
    }

    function isTrustedForwarder(address forwarder) public view returns (bool) {
        return forwarder == trustedForwarder;
    }

    function _msgSender() internal view returns (address sender) {
        if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {
            // Extract sender address from end of calldata (EIP-2771)
            assembly {
                sender := shr(96, calldataload(sub(calldatasize(), 20)))
            }
        } else {
            sender = msg.sender;
        }
    }

    // --- Upgradability (UUPS) ---
    function _authorizeUpgrade(address newImplementation) internal override onlyAdmin {
        emit Upgraded(newImplementation);
    }

    // --- Internal Helper Functions ---
    function _getPrice() internal view returns (int256, uint256) {
        (, int256 price,, uint256 updatedAt,) = priceFeed.latestRoundData();
        require(updatedAt >= block.timestamp - 60, "Stale price");
        return (price, updatedAt);
    }

    function _calculateFee(uint256 size) internal pure returns (uint256) {
        return size * 5 / 10000; // 0.05%
    }

    function _transferCollateral(uint256 amount) internal {
        IERC20(collateralToken).transferFrom(msg.sender, address(this), amount);
    }

    function _transfer(address to, uint256 amount) internal {
        IERC20(collateralToken).transfer(to, amount);
    }

    function _updateOpenInterest(bool isLong, int256 amount) internal {
        if (isLong) {
            totalLongs = uint256(int256(totalLongs) + amount);
        } else {
            totalShorts = uint256(int256(totalShorts) + amount);
        }
    }

    function _updateFundingRate() internal {
        if (block.timestamp % FUNDING_INTERVAL == 0) {
            uint256 imbalance = totalLongs > totalShorts
                ? totalLongs - totalShorts
                : totalShorts - totalLongs;
            fundingRate = imbalance * 1e18 / (totalLongs + totalShorts);
        }
    }

    function _calculatePnl(Position memory position, int256 currentPrice)
        internal pure returns (uint256)
    {
        int256 priceDelta = position.isLong
            ? currentPrice - position.entryPrice
            : position.entryPrice - currentPrice;
        return uint256(priceDelta) * position.size / 1e8;
    }

    function _isUnderwater(Position memory position, int256 currentPrice)
        internal pure returns (bool)
    {
        // Simple check: if collateral < loss
        int256 priceDelta = position.isLong
            ? currentPrice - position.entryPrice
            : position.entryPrice - currentPrice;
        int256 pnl = priceDelta * int256(uint256(position.size)) / 1e8;
        return int256(uint256(position.collateral)) + pnl <= 0;
    }

    // --- View Functions ---
    function getPosition(address user, uint256 positionId)
        external view returns (Position memory)
    {
        return positions[user][positionId];
    }
}
